// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: halbornctf/hal/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// redeem_dur defines HAL -> collateral redeem duration (how long does it takes to convert).
	RedeemDur time.Duration `protobuf:"bytes,1,opt,name=redeem_dur,json=redeemDur,proto3,stdduration" json:"redeem_dur" yaml:"redeem_dur"`
	// max_redeem_entries is a max number of concurrent redeem operations per account.
	MaxRedeemEntries int32 `protobuf:"varint,2,opt,name=max_redeem_entries,json=maxRedeemEntries,proto3" json:"max_redeem_entries,omitempty" yaml:"max_redeem_entries"`
	// collateral_metas defines a set of collateral token metas that are supported by the module.
	CollateralMetas TokenMeta `protobuf:"bytes,3,opt,name=collateral_metas,json=collateralMetas,proto3" json:"collateral_metas" yaml:"collateral_metas"`
	// hal_meta defines the HAL token meta.
	// HAL token must has a higher precision (number of decimals) than other collaterals.
	HalMeta TokenMeta `protobuf:"bytes,4,opt,name=hal_meta,json=halMeta,proto3" json:"hal_meta" yaml:"hal_meta"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_82dab9af94634ec4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRedeemDur() time.Duration {
	if m != nil {
		return m.RedeemDur
	}
	return 0
}

func (m *Params) GetMaxRedeemEntries() int32 {
	if m != nil {
		return m.MaxRedeemEntries
	}
	return 0
}

func (m *Params) GetCollateralMetas() TokenMeta {
	if m != nil {
		return m.CollateralMetas
	}
	return TokenMeta{}
}

func (m *Params) GetHalMeta() TokenMeta {
	if m != nil {
		return m.HalMeta
	}
	return TokenMeta{}
}

// TokenMeta defines HAL / collateral token metadata.
type TokenMeta struct {
	// denom is the sdk.Coin denomination (ibc / native tokens).
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	// decimals is a number of decimals for the sdk.Coin amount value.
	// Example: coin amount of 1.0usdt with 3 decimals -> 1000.
	Decimals uint32 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty" yaml:"decimals"`
	// description is an optional token description (IBC source info for example).
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *TokenMeta) Reset()         { *m = TokenMeta{} }
func (m *TokenMeta) String() string { return proto.CompactTextString(m) }
func (*TokenMeta) ProtoMessage()    {}
func (*TokenMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_82dab9af94634ec4, []int{1}
}
func (m *TokenMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMeta.Merge(m, src)
}
func (m *TokenMeta) XXX_Size() int {
	return m.Size()
}
func (m *TokenMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMeta.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMeta proto.InternalMessageInfo

func (m *TokenMeta) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TokenMeta) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *TokenMeta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "halbornctf.hal.Params")
	proto.RegisterType((*TokenMeta)(nil), "halbornctf.hal.TokenMeta")
}

func init() { proto.RegisterFile("halbornctf/hal/params.proto", fileDescriptor_82dab9af94634ec4) }

var fileDescriptor_82dab9af94634ec4 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xbd, 0x6e, 0x13, 0x31,
	0x1c, 0x8f, 0xe9, 0x07, 0x8d, 0x0b, 0x34, 0x35, 0xa8, 0x49, 0x8b, 0x7a, 0x8e, 0x3c, 0xa0, 0x8a,
	0xe1, 0x0e, 0xc1, 0x82, 0x32, 0x1e, 0x05, 0x21, 0xa1, 0x4a, 0xc8, 0xaa, 0x84, 0xc4, 0x12, 0x39,
	0x39, 0x37, 0x77, 0xc2, 0x3e, 0x47, 0x3e, 0x47, 0x4a, 0x5f, 0x80, 0x81, 0x89, 0x91, 0x91, 0x81,
	0x07, 0xe0, 0x31, 0x3a, 0x76, 0x64, 0x3a, 0x50, 0x32, 0xc0, 0x9c, 0x27, 0x40, 0xb1, 0x7d, 0xb9,
	0x00, 0x03, 0xcb, 0xc9, 0xf7, 0xfb, 0xf2, 0xff, 0xc3, 0xf0, 0x7e, 0xca, 0xc4, 0x40, 0xe9, 0x7c,
	0x68, 0x2e, 0xa2, 0x94, 0x89, 0x68, 0xcc, 0x34, 0x93, 0x45, 0x38, 0xd6, 0xca, 0x28, 0x74, 0xa7,
	0x26, 0xc3, 0x94, 0x89, 0xa3, 0x7d, 0x26, 0xb3, 0x5c, 0x45, 0xf6, 0xeb, 0x24, 0x47, 0xf7, 0x46,
	0x6a, 0xa4, 0xec, 0x31, 0x5a, 0x9e, 0x3c, 0x1a, 0x8c, 0x94, 0x1a, 0x09, 0x1e, 0xd9, 0xbf, 0xc1,
	0xe4, 0x22, 0x4a, 0x26, 0x9a, 0x99, 0x4c, 0xe5, 0x8e, 0x27, 0xef, 0x37, 0xe0, 0xf6, 0x6b, 0x7b,
	0x13, 0x7a, 0x03, 0xa1, 0xe6, 0x09, 0xe7, 0xb2, 0x9f, 0x4c, 0x74, 0x07, 0x74, 0xc1, 0xc9, 0xee,
	0xe3, 0xc3, 0xd0, 0xf9, 0xc3, 0xca, 0x1f, 0x9e, 0x7a, 0x7f, 0x7c, 0x7c, 0x55, 0xe2, 0xc6, 0xa2,
	0xc4, 0xfb, 0x97, 0x4c, 0x8a, 0x1e, 0xa9, 0xad, 0xe4, 0xd3, 0x77, 0x0c, 0x68, 0xd3, 0x01, 0xa7,
	0x13, 0x8d, 0x5e, 0x41, 0x24, 0xd9, 0xb4, 0xef, 0x15, 0x3c, 0x37, 0x3a, 0xe3, 0x45, 0xe7, 0x46,
	0x17, 0x9c, 0x6c, 0xc5, 0xc7, 0x8b, 0x12, 0x1f, 0xba, 0x84, 0x7f, 0x35, 0x84, 0xb6, 0x24, 0x9b,
	0x52, 0x8b, 0x3d, 0x77, 0x10, 0xe2, 0xb0, 0x35, 0x54, 0x42, 0x30, 0xc3, 0x35, 0x13, 0x7d, 0xc9,
	0x0d, 0x2b, 0x3a, 0x1b, 0xbe, 0xd6, 0x3f, 0x87, 0x14, 0x9e, 0xab, 0x77, 0x3c, 0x3f, 0xe3, 0x86,
	0xc5, 0xd8, 0xd7, 0xda, 0x76, 0x37, 0xfd, 0x1d, 0x40, 0xe8, 0x5e, 0x0d, 0x2d, 0x0d, 0x05, 0x3a,
	0x83, 0x3b, 0xa9, 0xa7, 0x3b, 0x9b, 0xff, 0x8b, 0x6f, 0xfb, 0xf8, 0x3d, 0x17, 0x5f, 0x19, 0x09,
	0xbd, 0x99, 0xba, 0xbc, 0x5e, 0xf7, 0xd7, 0x67, 0x0c, 0x3e, 0xfc, 0xfc, 0xfa, 0xb0, 0xbd, 0xb6,
	0xe5, 0xa9, 0xdd, 0xb3, 0x9b, 0x3e, 0xf9, 0x02, 0x60, 0x73, 0x95, 0x88, 0x1e, 0xc0, 0xad, 0x84,
	0xe7, 0x4a, 0xda, 0x35, 0x34, 0xe3, 0xd6, 0xa2, 0xc4, 0xb7, 0x5c, 0xb8, 0x85, 0x09, 0x75, 0x34,
	0x8a, 0xe0, 0x4e, 0xc2, 0x87, 0x99, 0x64, 0xc2, 0x0d, 0xf4, 0x76, 0x7c, 0xb7, 0xae, 0xa3, 0x62,
	0x08, 0x5d, 0x89, 0xd0, 0x53, 0xb8, 0x9b, 0xf0, 0x62, 0xa8, 0xb3, 0xf1, 0x72, 0x89, 0x76, 0x72,
	0xcd, 0xf8, 0x60, 0x51, 0x62, 0x54, 0x79, 0x56, 0x24, 0xa1, 0xeb, 0xd2, 0xde, 0xe6, 0xb2, 0x85,
	0xf8, 0xd1, 0xd5, 0x2c, 0x00, 0xd7, 0xb3, 0x00, 0xfc, 0x98, 0x05, 0xe0, 0xe3, 0x3c, 0x68, 0x5c,
	0xcf, 0x83, 0xc6, 0xb7, 0x79, 0xd0, 0x78, 0x7b, 0xf0, 0xd2, 0x75, 0xf6, 0xec, 0xfc, 0x85, 0xef,
	0xcc, 0x5c, 0x8e, 0x79, 0x31, 0xd8, 0xb6, 0x4f, 0xe7, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1d, 0x78, 0x14, 0x62, 0xe0, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RedeemDur != that1.RedeemDur {
		return false
	}
	if this.MaxRedeemEntries != that1.MaxRedeemEntries {
		return false
	}
	if !this.CollateralMetas.Equal(&that1.CollateralMetas) {
		return false
	}
	if !this.HalMeta.Equal(&that1.HalMeta) {
		return false
	}
	return true
}
func (this *TokenMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenMeta)
	if !ok {
		that2, ok := that.(TokenMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Decimals != that1.Decimals {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HalMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CollateralMetas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaxRedeemEntries != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxRedeemEntries))
		i--
		dAtA[i] = 0x10
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.RedeemDur, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RedeemDur):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TokenMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Decimals != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RedeemDur)
	n += 1 + l + sovParams(uint64(l))
	if m.MaxRedeemEntries != 0 {
		n += 1 + sovParams(uint64(m.MaxRedeemEntries))
	}
	l = m.CollateralMetas.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.HalMeta.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *TokenMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovParams(uint64(m.Decimals))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemDur", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.RedeemDur, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRedeemEntries", wireType)
			}
			m.MaxRedeemEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRedeemEntries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralMetas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HalMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HalMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
