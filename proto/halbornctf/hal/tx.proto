syntax = "proto3";

package halbornctf.hal;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "halbornctf/hal/params.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "HalbornCTF/x/hal/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams     (MsgUpdateParams    ) returns (MsgUpdateParamsResponse    );
  rpc MintHal          (MsgMintHal         ) returns (MsgMintHalResponse         );
  rpc RedeemCollateral (MsgRedeemCollateral) returns (MsgRedeemCollateralResponse);
  rpc CreateTicket     (MsgCreateTicket    ) returns (MsgCreateTicketResponse    );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                        "authority";
  option           (amino.name) = "halbornctf/x/hal/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgMintHal {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator          = 1;
  cosmos.base.v1beta1.Coin collateralAmount = 2 [(gogoproto.nullable) = false];
}

message MsgMintHalResponse {
  cosmos.base.v1beta1.Coin mintedAmount = 1 [(gogoproto.nullable) = false];
}

message MsgRedeemCollateral {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator   = 1;
  cosmos.base.v1beta1.Coin halAmount = 2 [(gogoproto.nullable) = false];
}

message MsgRedeemCollateralResponse {
  cosmos.base.v1beta1.Coin burnedAmount = 1 [(gogoproto.nullable) = false];
  
  // completion_time defines the redeeming period end time.
  google.protobuf.Timestamp completion_time = 2 [(gogoproto.moretags) = "yaml:\"completion_time\"", (gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

message MsgCreateTicket {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string author  = 2;
  string issue   = 3;
}

message MsgCreateTicketResponse {
  uint64 id = 1;
}

